#include"h.h"
//#include"h.cpp"


int main()
{
	//包含模式
    //cout << "包含模式max(6,8)=" << ::max(6, 8) << endl;
	std::string s1 = "csq";
	std::string s2 = "csqnb";

	//显示实例化
	cout << "显示实例化max(6,8)=" << ::max(6, 8) << endl;
	cout << "显示实例化max(7.3,3.2)=" << ::max(7.3, 3.2) << endl;

	/*
	
	 小结：
	 
	 1.模版给原始的"编译器+链接器"模型带来挑战，因此，需要使用其他的方法来组织模版代码。
	   这些方法是 包含模型，显示实例化，分离模型（vs2015不支持，很多编译器都不支持）。

	 2.在大多数情况下，使用包含模型。（所有的模版代码放在头文件中）

	 3.通过模版声明代码和模版定义代码放在不同的头文件中，可以很容易地在包含模型和显示实例化之间做出
	   选择。

	 4.C++标准为模版定义了一个分离的编译模版，（使用关键字export），但是，该关键字的使用还没有普及，
	   很多编译器也不支持。
	 
	 5.调试模版代码具有挑战性（这个还没有学）；

	 6.模版实例化可能具有很长的名称。

	 7.为了充分利用预编译代码，要确认#include指示符的顺序是相同的。
	
	
	
	
	
	
	
	*/
	
	return 0;
}
