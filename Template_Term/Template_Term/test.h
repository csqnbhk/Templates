/************************************************************************************************
        该test.h文件的作用：回顾一下模版术语知识点
		author：Demon
		Time:2017/9/10
*********************************************************************************************/
#pragma once

//1.类模板还是模版类
/*
   1.类类型：在c++中，类（class,struct)和联合(union)都被称为类类型。
   2.类：用关键字class或者struct引入的类类型。

*/

//2.实例化和特化

/*
  1.显示特化
  template<typename T>
  class MyClass
  {
   ...

  };

  template<>
  class MyClass<std::string>
  {
  };

  2.局部特化
  template<typename T1,typename T2>
  class MyClass
  {
  };

  template<typename  T>
  class MyClass<int,T>            //局部特化T2
  {
  };

*/



//3.声明和定义
/*

class C{}; //类C的定义（和声明）

void f(int p)//函数f()的定义（和声明）
{
}

extern int a;//变量a的声明

extern int b=1;//一个初始化器使之称为v的定义

int w;//前面没有extern的全局变量的声明，同时也是定义

*/

//4.一处定义原则
/*

 1.和全局变量与静态数据成员一样，在整个程序中，非内联函数和成员函数只能被定义一次。

 2.类类型（class，struct，union）和内联函数和成员函数在每个编译单元中最多只能定义一次。如果存在多个编译单元，
   则其所有的定义都必须是相等的。

 3.一个编译单元：预处理一个源文件所得的结果；也就是说，它包括了#include指示符（既包含的头文件）所包含的内容。

 4.可链接实体：非内联函数或者非内联成员函数，全局变量或者静态成员变量，还包括从模版产生的这些实体。

*/

//5.模版参数和模版实参


/*

   注意这句话：传递模版实参使之称为模版参数。

   1.模版参数：位于模版声明或者定义内部，关键字template后面所列举的名称。

   2、模版实参：用来替换模版参数各个对象。


   一个原则：模版实参必须是一个可以在编译期确定的模版实体或者值。


   template<typename T>
   class MyClass
   {

      public:
	  ArrayInClass<T,12>  connects;
   };

   模版参数是编译期实体（第一个T为模版参数)，所以可以用来生产模版实参（第二个T为模版实参）。

*/